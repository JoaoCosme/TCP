@startuml classes

class ControladorDeGui{
    - estadoGui
    + entraTexto():String
    + abrir()
    + fechar()
}

enum estadoGui{
    + Standby
    + ProcessandoMusica
}

class DecodificadorTexto{
    + traduzTexto(String):Musica
}

interface TradutorTextoComando{
    + traduz(String):comando
}

class TradutorTextoParaComando implements TradutorTextoComando{}

class ControladorMusical{
    + executaMusica(Musica)
}

interface AdaptadorMusical{
    + tocarNota(Comando)
    + aumentarOitava()
    + reduzirOitava()
    + aumentarVolume()
    + reduzirVolume()
}

class AdaptadorJFugue implements AdaptadorMusical{
    - BPM
    - Oitava
    - Volume
    - Instrumento
}

interface TradutorAdaptador{
    + traduzParaAdaptador(Comando):String
}

class TradutorJFugue implements TradutorAdaptador{

}

enum Instrumento{
    - bateria
    - piano
    - guiatarra
}

enum Comando{
    + do
    + re
    + mi
    + fa
    + sol
    + la
    + si
    ...
}

class Musica{
    - sequenciaDeComandos
}


ControladorDeGui --> DecodificadorTexto
ControladorDeGui --> ControladorMusical
DecodificadorTexto --> TradutorTextoComando
DecodificadorTexto --> Musica
ControladorMusical --> AdaptadorMusical
TradutorTextoComando --> Comando
ControladorDeGui --> estadoGui
AdaptadorJFugue --> Instrumento
AdaptadorJFugue --> TradutorAdaptador


@enduml