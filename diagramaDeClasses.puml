@startuml classes

class Orquestrador{
    - DecodificadorTexto
    - ControladorMusical
    + orquestra( String , Boolean)
}

class ControladorDeGui{
    - estadoGui
    + entraTexto():String
    + entraArquivo():String
    + salvarMusica():Boolean
    + abrir()
    + fechar()
}

class LeitorDeArquivo{
    + leArquivo(String):String
}

enum estadoGui{
    + Standby
    + ProcessandoMusica
}

class DecodificadorTexto{
    + traduzTexto(String):Musica
}

interface TradutorTextoComando{
    + traduz(String):comando
}

class TradutorTextoParaComando implements TradutorTextoComando{}

class ControladorMusical{
    + executaMusica(Musica,Boolean)
}

interface AdaptadorMusical{
    + tocarNota(Comando)
    + aumentarOitava()
    + reduzirOitava()
    + aumentarVolume()
    + reduzirVolume()
    + salvaMusica()
}

class AdaptadorJFugue implements AdaptadorMusical{
    - BPM
    - Oitava
    - Volume
    - Instrumento
}

class JFugueDownloader{
    + salvarMusica()
}

interface TradutorAdaptador{
    + traduzParaAdaptador(Comando):String
}

class TradutorJFugue implements TradutorAdaptador{

}

enum Instrumento{
    - bateria
    - piano
    - guiatarra
}

enum Comando{
    + do
    + re
    + mi
    + fa
    + sol
    + la
    + si
    ...
}

class Musica{
    - sequenciaDeComandos
}

class ValidadorDeComando{
    + eNota(Comando):Boolean
    + eComandoDeVolume(Comando):Boolean
    + eComandoDeBPM(Comando):Boolean
    + eComandoDeOitava(Comando):Boolean
    + eComandoDeInstrumento(Comando):Boolean
}


ControladorDeGui --> Orquestrador
ControladorDeGui --> LeitorDeArquivo
AdaptadorJFugue --> JFugueDownloader
Orquestrador --> ControladorMusical
Orquestrador --> DecodificadorTexto
DecodificadorTexto --> TradutorTextoComando
DecodificadorTexto --> Musica
ControladorMusical --> AdaptadorMusical
ControladorMusical ..> ValidadorDeComando
TradutorTextoComando --> Comando
ControladorDeGui --> estadoGui
AdaptadorJFugue --> Instrumento
AdaptadorJFugue --> TradutorAdaptador


@enduml